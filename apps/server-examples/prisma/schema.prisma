generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SocialProvider {
  google
  naver
  kakao
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id           Int             @id @default(autoincrement())
  socialId     String?
  provider     SocialProvider?
  email        String          @unique
  password     String
  name         String
  role         Role            @default(USER)
  status       Status          @default(ACTIVE)
  refreshToken String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  posts         Post[]
  refreshTokens RefreshToken[]

  @@unique([socialId, provider])
  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts Post[]

  @@map("categories")
}

model RefreshToken {
  id        String   @id @default(uuid())
  familyId  String
  tokenHash String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRevoked Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categories Category[]

  @@map("posts")
}
